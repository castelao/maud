#!/usr/bin/env python

""" This is a first prototype of MAUD script to filter a NetCDF file

    Far away from an ideal solution. It's just to resolve the Bia's
      problem for now.

    Type this command with -h to see the help. Here is an example:

    maud4nc -lowpasswindowlength=7 --highpasswindowlength=90 --varname='temperature' -w hamming --npes=18 -o model_output.nc model_input.nc
"""

import os.path
import pkg_resources
from datetime import datetime
from optparse import OptionParser
#import multiprocessing as mp

import numpy as np
from numpy import ma
from netCDF4 import Dataset

#cmaud versions are still too slow.
#try:
#    from cmaud import wmean_1D
#    from cmaud import wmean_bandpass_1D
#    print("Yeahh!, Let's do it with CMAUD!")
#except:
#    from maud import wmean_1D
#    from maud import wmean_bandpass_1D
from maud import wmean_1D
from maud import wmean_bandpass_1D

# ============================================================================
# ==== Parsing the options on command line
parser = OptionParser()

parser.add_option("--lowpasswindowlength", dest="lowpasswindowlength",
    type="float", default=None,
    help="Length of the filter window. Must be on the same scale of the scalevar")

parser.add_option("--highpasswindowlength", dest="highpasswindowlength",
    type="float", default=None,
    help="Length of the filter window. Must be on the same scale of the scalevar")

parser.add_option("--varname", dest="varname",
    help="Variable to be filtered")

parser.add_option("--scalevar", dest="scalevar",
    help="The scale on the dimension to be filtered.", default="time")

parser.add_option("-w", dest="windowmethod",
    default="hamming",
    help="Type of window [hamming, hann, boxcar, triangle, lanczos]")

#parser.add_option("--interp", dest="interp",
#    action="store_true", default = False,
#    help="If selected fill the masked points if is there available data around.")

#parser.add_option("--npes",
#    action="store", type="int", dest="npes",
#    help="Defines the number of parallel processes.",
#    default=None)

parser.add_option("-o", "--output", dest="outputfile",
    help="The output file where the filtered data will be saved.")

(options, args) = parser.parse_args()

# ============================================================================
assert (options.lowpasswindowlength is not None) or \
        (options.highpasswindowlength is not None), \
        "--lowpasswindowlength and --highpasswindowlength can't be both None"

assert os.path.isfile(args[0]), "%s is not a valid file" % args[0]
inputfilename = args[0]
ncin = Dataset(inputfilename, 'r')

assert options.varname in ncin.variables.keys(), \
        "%s doesn't contain %s" % (inputfilename, options.varname)
varname = options.varname

axis = ncin.variables[varname].dimensions.index(
        ncin.variables[options.scalevar].dimensions[0])
assert axis==0, "Sorry, at this point I only know to filter if time is the first dimension"

# ============================================================================
if (options.lowpasswindowlength is None) and \
        (options.highpasswindowlength is not None):
    filtertype = 'highpass'
elif (options.lowpasswindowlength is not None) and \
        (options.highpasswindowlength is None):
    filtertype = 'lowpass'
else:
    filtertype = 'bandpass'

# ============================================================================
if options.outputfile is None:
    varout  = varname + "_maud"
    newfile = False
    ncin.close()
    ncin = ncout = Dataset(inputfilename, 'a')
else:
    varout  = varname
    newfile = True
    ncout = Dataset(options.outputfile, 'w')

# ============================================================================
if newfile == True:
    # Global Attributes

    # Copying dimensions
    dims = ncin.variables[varname].dimensions
    for dim in dims:
        ncout.createDimension(dim, len(ncin.dimensions[dim]))
    
    # Copying variables related to the dimensions
    variables = {}

    for dim in dims:
        variables[dim] = ncout.createVariable(dim, 
                ncin.variables[dim].datatype.name,
                ncin.variables[dim].dimensions)
        variables[dim][:] = ncin.variables[dim][:]
        for a in ncin.variables[dim].ncattrs():    
            setattr(ncout.variables[dim], a, getattr(ncin.variables[dim], a))

# ============================================================================
attrs = ncin.variables[varname].ncattrs()
try:
    output = ncout.createVariable(varout,
              ncin.variables[varname].dtype,
              ncin.variables[varname].dimensions,
              fill_value=ncin.variables[varname]._FillValue)
    attrs.remove('_FillValue')
except:
    output = ncout.createVariable(varout,
              ncin.variables[varname].dtype,
              ncin.variables[varname].dimensions)

output.set_auto_maskandscale(True)

for a in attrs:
    setattr(ncout.variables[varout], a,
            getattr(ncin.variables[varname], a))

ncout.sync()

assert len(ncin.variables[varname].dimensions) >= 2

N = ncin.variables[varname].shape[1]
try:
    from progressbar import ProgressBar
    pbar = ProgressBar(maxval=N).start()
except:
    print("progressbar is not available")

data = ncin.variables[varname]

scale = ncin.variables[options.scalevar][:].astype('f')

for n in range(N):
    try:
        pbar.update(n+1)
    except:
        print("%s/%s" % (n+1, N))

    if filtertype == 'bandpass':
                tmp = wmean_bandpass_1D(data[:, n],
                        lshorterpass = options.highpasswindowlength,
                        llongerpass = options.lowpasswindowlength,
                        t = scale,
                        method = options.windowmethod,
                        axis=0)

    elif filtertype == 'lowpass':
        tmp = wmean_1D(data[:, n],
                l=options.lowpasswindowlength,
                t=scale,
                method=options.windowmethod,
                axis=0)

    elif filtertype == 'highpass':
        tmp = data[:, n] - \
                wmean_1D(data[:, n],
                        l=options.highpasswindowlength,
                        t=scale,
                        method=options.windowmethod,
                        axis=0)

    output[:, n] = tmp

try:
    pbar.finish()
except:
    pass

# Not beautifull, but works for now.
# Determine if the input was already filtered by MAUD, if so, how many times.
import re
maudattr = re.compile('maud_(\d+)')
levels = np.unique([int(maudattr.match(a).groups()[0]) \
        for a in ncin.variables[varname].ncattrs() if maudattr.match(a)])
if levels.size == 0:
    filter_level = 1
else:
    filter_level = levels.max()+1

# Saving the filter window size as an attribute of the output variable
if filtertype == 'highpass':
    setattr(output, 'maud_%i_highpass_size' % filter_level, options.highpasswindowlength)
elif filtertype == 'lowpass':
    setattr(output, 'maud_%i_lowpass_size' % filter_level, options.lowpasswindowlength)
elif filtertype == 'bandpass':
    setattr(output, 'maud_%i_highpass_size' % filter_level, options.highpasswindowlength)
    setattr(output, 'maud_%i_lowpass_size' % filter_level, options.lowpasswindowlength)
ver_maud = pkg_resources.get_distribution("maud").version
# Saving the version as an attribute of the output variable
setattr(output, 'maud_%i_version' % filter_level, ver_maud)
# Saving the filtering date  as an attribute of the output variable
setattr(output, 'maud_%i_processing_date' % filter_level, datetime.now().isoformat())

ncout.close()
#ncin.close()
