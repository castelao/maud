#!/usr/bin/env python

""" This is a MAUD script to filter a NetCDF file

    Far away from an ideal solution. It's just to resolve the Bia's
      problem for now.

    This script will use the latitude and longitude provided in the
      netcdf file itself, and apply a moving average window considering
      the linear distances.

    This script is mostly usefull for regular cartesian grids, and so
      it is not regular on linear distances, or for numerical model
      grids, that can change the spacing between the grids.

      Type this command with -h to see the help. Here is an example:

      maud4latlonnc --shorterpasslength 600e3 --varname='temperature' -w hamming --interp --npes=18 --output=temperature_smooth_output.nc model_output.nc

      This will save on the same netcdf another variable named temperature_maud
"""

import os.path
import pkg_resources
from datetime import datetime
from optparse import OptionParser
import multiprocessing as mp

import numpy as np
from numpy import ma
from netCDF4 import Dataset

try:
    from cmaud import wmean_2D_latlon_serial as wmean_2D_latlon
except:
    from maud import wmean_2D_latlon_serial as wmean_2D_latlon

# ============================================================================
# ==== Parsing the options on command line
parser = OptionParser()

parser.add_option("--largerpasslength", dest="largerpasslength",
        type="float", default=None,
        help="Lentgth scales shorter that this are attenuated. Units is meters.")

parser.add_option("--shorterpasslength", dest="shorterpasslength",
        type="float", default=None,
        help="Length scales longer than this are attenuated. Units is meters.")

parser.add_option("--varname", dest="varname",
    help="Variable to be filtered")

parser.add_option("-w", dest="windowmethod",
    default="hamming",
    help="Type of window [hamming, hann, boxcar, triangle, lanczos]")

parser.add_option("--interp", dest="interp",
    action="store_true", default = False,
    help="If selected fill the masked points if is there available data around.")

parser.add_option("--npes",
    action="store", type="int", dest="npes",
    help="Defines the number of parallel processes.",
    default=None)

parser.add_option("-o", "--output", dest="outputfile",
            help="The output file where the filtered data will be saved.")

(options, args) = parser.parse_args()

# ============================================================================
assert (options.largerpasslength is not None) or \
        (options.shorterpasslength is not None), \
        "--largerpasslength and --shorterpasslength can't be both None"

assert os.path.isfile(args[0]), "%s is not a valid file" % args[0]
inputfilename = args[0]
ncin = Dataset(inputfilename, 'r')

assert options.varname in ncin.variables.keys(), \
        "%s doesn't contain %s" % (inputfilename, options.varname)
varname = options.varname

# ============================================================================
# ==== Handling Lat & Lon variables
# ---- First I'll guess the name of the variables

if ('latitude' in ncin.variables) and ('longitude' in ncin.variables):
    lat_var = 'latitude'
    lon_var = 'longitude'
elif ('lat' in ncin.variables) and ('lon' in ncin.variables):
    lat_var = 'lat'
    lon_var = 'lon'
#elif ('Lat' in ncin.variables) and ('Lon' in ncin.variables):
#    lat_var = 'Lat'
#    lon_var = 'Lon'
else:
    assert False, "Sorry, I couldn't guess the name of the lat lon variables."


lat = ncin.variables[lat_var]
lon = ncin.variables[lon_var]

# ---- If lat & lon are 1D variables, I'll need to do a meshgrid
if (len(lat.dimensions)==1) & (len(lon.dimensions)==1):
    if (lat.dimensions[0] == ncin.variables[varname].dimensions[1]) & \
            (lon.dimensions[0] == ncin.variables[varname].dimensions[2]):
                Lon, Lat = np.meshgrid(lon[:], lat[:])
elif (len(lat.dimensions) == 2) and (lat.dimensions == lon.dimensions):
    assert (lat.dimensions == ncin.variables[varname].dimensions[1:]) , \
            "lat, lon dimensions don't match with %s." % varname
    Lat = lat[:]
    Lon = lon[:]
else:
    assert False

# ============================================================================
if ((options.largerpasslength is None) and
        (options.shorterpasslength is not None)):
    filtertype = 'highpass'
elif ((options.largerpasslength is not None) and
        (options.shorterpasslength is None)):
    filtertype = 'lowpass'
else:
    filtertype = 'bandpass'
    assert False, "Sorry, I'm not ready to deal with bandpass"

# ============================================================================
if options.outputfile is None:
    varout  = varname + "_maud2D"
    newfile = False
    assert varout not in ncin.variables, \
            "Hey! %s is already in this file. I'll not overwrite it" % varout
    ncin.close()
    ncin = ncout = Dataset(inputfilename, 'a')
else:
    varout  = varname
    newfile = True
    ncout = Dataset(options.outputfile, 'w')

# ============================================================================
if newfile is True:
    # Global Attributes

    # Copying dimensions
    dims = ncin.variables[varname].dimensions
    for dim in dims:
        ncout.createDimension(dim, len(ncin.dimensions[dim]))

    # Copying variables related to the dimensions
    variables = {}

    for dim in dims:
        variables[dim] = ncout.createVariable(dim,
                ncin.variables[dim].datatype.name,
                ncin.variables[dim].dimensions)
        variables[dim][:] = ncin.variables[dim][:]
        for a in ncin.variables[dim].ncattrs():
            setattr(ncout.variables[dim], a, getattr(ncin.variables[dim], a))

# ============================================================================
attrs = ncin.variables[varname].ncattrs()
try:
    output = ncout.createVariable(varout,
              ncin.variables[varname].dtype.name,
              ncin.variables[varname].dimensions,
              fill_value=ncin.variables[varname]._FillValue)
    attrs.remove('_FillValue')
except:
    output = ncout.createVariable(varout,
              ncin.variables[varname].dtype.name,
              ncin.variables[varname].dimensions)

output.set_auto_maskandscale(True)

for a in attrs:
    setattr(ncout.variables[varout], a,
            getattr(ncin.variables[varname], a))

ncout.sync()

assert len(ncin.variables[varname].dimensions) == 3, \
    "Sorry, at this point I know to handle only 3D arrays."

T, I, J = ncin.variables[varname].shape

try:
    from progressbar import ProgressBar
    pbar = ProgressBar(maxval=T).start()
except:
    print "ProgressBar is not available"

data = ncin.variables[varname]

npesmax = 2 * mp.cpu_count() +1
if (options.npes <= npesmax) & (options.npes > 0):
    npes = options.npes
else:
    print "Considering the number of cpu on your machine, I'll stick with npe=%s"  % npesmax
    npes = npesmax

print " Will work with %s npes" % npes

pool = mp.Pool(npes)
results = []

print "Preparing the workers."
if filtertype == 'highpass':
    l = options.shorterpasslength
elif filtertype == 'lowpass':
    l = options.largerpasslength

for nt in range(T):
    results.append( pool.apply_async(
        wmean_2D_latlon,
        (Lat, Lon, data[nt], l, options.windowmethod,
            options.interp)
        ) )
pool.close()
print "Collecting the results."
for nt, r in enumerate(results):
    try:
        pbar.update(nt)
    except:
        pass

    if filtertype == 'lowpass':
        tmp = r.get()
    elif filtertype == 'highpass':
        tmp = data[nt] - r.get()

    output[nt] = tmp

try:
    pbar.finish()
except:
    pass

# Not beautifull, but works for now.
# Determine if the input was already filtered by MAUD, if so, how many times.
import re
maudattr = re.compile('maud_(\d+)')
levels = np.unique([int(maudattr.match(a).groups()[0]) \
        for a in ncin.variables[varname].ncattrs() if maudattr.match(a)])
if levels.size == 0:
    filter_level = 1
else:
    filter_level = levels.max()+1

# Saving the filter window size as an attribute of the output variable
if filtertype == 'highpass':
    setattr(output, 'maud_%i_2Dhighpass_size' % filter_level, options.shorterpasslength)
elif filtertype == 'lowpass':
    setattr(output, 'maud_%i_2Dlowpass_size' % filter_level, options.largerpasslength)
elif filtertype == 'bandpass':
    setattr(output, 'maud_%i_2Dhighpass_size' % filter_level, options.shorterpasslength)
    setattr(output, 'maud_%i_2Dlowpass_size' % filter_level, options.largerpasslength)
ver_maud = pkg_resources.get_distribution("maud").version
# Saving the version as an attribute of the output variable
setattr(output, 'maud_%i_version' % filter_level, ver_maud)
# Saving the filtering date  as an attribute of the output variable
setattr(output, 'maud_%i_processing_date' % filter_level, datetime.now().isoformat())

ncout.close()
#ncin.close()
